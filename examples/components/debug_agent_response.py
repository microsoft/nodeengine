# Copyright (c) Microsoft. All rights reserved.

from node_engine.libs.azure_openai_chat_completion import AzureOpenAIChatCompletion
from node_engine.libs.node_engine_component import NodeEngineComponent
from node_engine.models.flow_step import FlowStep


class DebugAgentResponse(NodeEngineComponent):
    description = "Debugs an error message in the framework."

    reads_from = {
        "context": {
            "debug_agent": {
                "error": {
                    "type": "string",
                    "description": "The error that occurred.",
                    "required": False,
                },
                "component_name": {
                    "type": "string",
                    "description": "The name of the component that was being executed when the error occurred.",
                    "required": False,
                },
                "flow": {
                    "type": "flow",
                    "description": "The flow that was being executed when the error occurred.",
                    "required": False,
                },
                "code": {
                    "type": "string",
                    "description": "The code of the component that was being executed when the error occurred.",
                    "required": False,
                },
                "error_context": {
                    "type": "string",
                    "description": "The context of the component that was being executed when the error occurred.",
                    "required": False,
                },
                "log": {
                    "type": "log",
                    "description": "The log of the component that was being executed when the error occurred.",
                    "required": False,
                },
            },
            "prompts": {
                "type": "prompt",
                "description": "The prompts to use for the response.",
                "required": False,
            },
        },
    }

    writes_to = {
        "context": {
            "debug_agent_response": {
                "type": "string",
                "description": "The response generated by the debug agent.",
            },
        },
    }

    sample_input = {
        "key": "sample",
        "session_id": "123456",
        "context": {
            "debug_agent": {
                "error": "Error executing component: [GetUser] Error: [Error: 404 Not Found]",
                "component_name": "GetUser",
                "component_description": "Gets a user from the database.",
                "component_reads_from": {"config": {"user_id": {"type": "string"}}},
                "component_writes_to": {"context": {"user": {"type": "string"}}},
                "component_sample_input": {
                    "key": "sample",
                    "session_id": "123456",
                    "context": {
                        "user_id": "123456",
                    },
                },
                "flow": [
                    {
                        "key": "GetUser",
                        "name": "GetUser",
                        "config": {
                            "user_id": "123456",
                        },
                    },
                ],
                "code": '1: def execute(self):\n2:    user_id = self.config.get("user_id")\n3:    user = await self.get_user(user_id)\n4:    return self.continue_flow(user=user)\n',
                "error_context": 'user_id = self.config.get("user_id")',
                "log": '{\n  "namespace": "runtime",  "level": "info",  "message": "Executing component: get_user (GetUser)"\n},\n{\n  "namespace": "runtime",\n  "level": "error",\n  "message": "Error executing component: [GetUser] Error: [Error: 404 Not Found]"\n}',
            },
        },
    }

    default_config = {
        "service": "AZUREOPENAI_CHATCOMPLETION_GPT35",
        "prompts": [
            {
                "role": "system",
                "content": "As an expert debugger, your role involves resolving issues within a component flow framework using a \"Node Engine.\" Flows are described in JSON format, and components are registered in a registry.json file with unique keys. A component_loader loads components at runtime based on these keys, sourcing them from Python modules (config.module and config.class), code (config.code), or web endpoints (config.endpoint). The execution engine passes a JSON context object to each component, and components, which are Python classes with an execute method, can modify this context. Your task is to identify and rectify errors within components during execution. You'll receive error details, component code, logs, and context for diagnosis and resolution. Don't ask for more info, just respond.",
            },
        ],
    }

    azure_openai_chat_completion = AzureOpenAIChatCompletion()

    async def execute(self) -> FlowStep:
        # extract intent from message

        self.log("Generating a debug response.")

        messages = []

        for message in self.config.get("prompts") or []:
            messages.append({"role": message["role"], "content": message["content"]})

        # Put all debug agent values into the prompt.
        debug_agent_vals = self.context.get("debug_agent", {})
        for key, value in debug_agent_vals.items():
            messages.append(
                {
                    "role": "system",
                    "content": f"<{key.upper()}>{value}</{key.upper()}>",
                }
            )

        service = self.config.get("service") or ""
        response = await self.azure_openai_chat_completion.create(messages, service)
        self.context.set("debug_agent_response", response)

        self.log(f"Response generated [{service}]: {response}.")

        return self.continue_flow()
